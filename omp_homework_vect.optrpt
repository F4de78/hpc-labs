Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: -fopenmp -qopt-report=5 -qopt-report-phase=vec -o dft_vect

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(107,3) inlined into omp_homework_vect.c(27,5)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ omp_homework_vect.c(108,5) ]
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3) inlined into omp_homework_vect.c(27,5)
   remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(114,6) ]
   remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(115,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3) inlined into omp_homework_vect.c(31,5)
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(124,6) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(125,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3) inlined into omp_homework_vect.c(35,5)
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(124,6) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(125,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(73,3) inlined into omp_homework_vect.c(42,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_homework_vect.c(79,7) inlined into omp_homework_vect.c(42,5)
      remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(83,26) ]
      remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(83,57) ]
      remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(81,20) ]
      remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(81,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.179
      remark #15355: vectorization support: tmp_i is double type reduction   [ omp_homework_vect.c(76,20) ]
      remark #15355: vectorization support: tmp_r is double type reduction   [ omp_homework_vect.c(75,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 562 
      remark #15477: vector cost: 128.500 
      remark #15478: estimated potential speedup: 4.370 
      remark #15482: vectorized math library calls: 2 
      remark #15486: divides: 2 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at omp_homework_vect.c(73,3) inlined into omp_homework_vect.c(45,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_homework_vect.c(79,7) inlined into omp_homework_vect.c(45,5)
      remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(83,26) ]
      remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(83,57) ]
      remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(81,20) ]
      remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(81,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.179
      remark #15355: vectorization support: tmp_i is double type reduction   [ omp_homework_vect.c(76,20) ]
      remark #15355: vectorization support: tmp_r is double type reduction   [ omp_homework_vect.c(75,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 562 
      remark #15477: vector cost: 128.500 
      remark #15478: estimated potential speedup: 4.370 
      remark #15482: vectorized math library calls: 2 
      remark #15486: divides: 2 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5) inlined into omp_homework_vect.c(45,5)
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 62 
   remark #15477: vector cost: 35.000 
   remark #15478: estimated potential speedup: 1.770 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(133,3) inlined into omp_homework_vect.c(52,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_vect.c(135,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_vect.c(137,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: DFT(int, double *, double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(73,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at omp_homework_vect.c(79,7)
      remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(83,26) ]
      remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(83,57) ]
      remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(81,20) ]
      remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(81,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.206
      remark #15355: vectorization support: tmp_i is double type reduction   [ omp_homework_vect.c(76,20) ]
      remark #15355: vectorization support: tmp_r is double type reduction   [ omp_homework_vect.c(75,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 570 
      remark #15477: vector cost: 131.000 
      remark #15478: estimated potential speedup: 4.340 
      remark #15482: vectorized math library calls: 2 
      remark #15486: divides: 2 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at omp_homework_vect.c(79,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5)
<Multiversioned v1>
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.014
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 63 
   remark #15477: vector cost: 35.000 
   remark #15478: estimated potential speedup: 1.780 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(93,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(94,7) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.179
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at omp_homework_vect.c(92,5)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: fillInput(double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(107,3)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ omp_homework_vect.c(108,5) ]
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference xr[n] has aligned access   [ omp_homework_vect.c(114,6) ]
   remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(115,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference xr[n] has unaligned access   [ omp_homework_vect.c(114,6) ]
   remark #15388: vectorization support: reference xi[n] has aligned access   [ omp_homework_vect.c(115,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.083
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at omp_homework_vect.c(109,3)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: setOutputZero(double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(123,3)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference Xr_o[n] has aligned access   [ omp_homework_vect.c(124,6) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(125,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference Xr_o[n] has unaligned access   [ omp_homework_vect.c(124,6) ]
   remark #15388: vectorization support: reference Xi_o[n] has aligned access   [ omp_homework_vect.c(125,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.083
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at omp_homework_vect.c(123,3)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: checkResults(double *, double *, double *, double *, double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(133,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_vect.c(135,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_vect.c(137,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: printResults(double *, double *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at omp_homework_vect.c(147,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ omp_homework_vect.c(148,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================
